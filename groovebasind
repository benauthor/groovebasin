#!/usr/bin/env coffee

fs = require 'fs'
http = require 'http'
net = require 'net'
socketio = require 'socket.io'
static = require 'node-static'
nconf = require 'nconf'
url = require 'url'
RdioServer = require './server/rdio_server'

nconf
  .argv()
  .env()
# these files in the wrong order because of
# https://github.com/flatiron/nconf/issues/28
  .file({file: "/etc/groovebasinrc"})
  .file({file: "#{process.env.HOME}/.groovebasinrc"})
  .defaults
    log_level: 3
    http:
      port: 80
    mpd:
      host: 'localhost'
      port: 6600
      conf: "/etc/mpd.conf"

# check for library link
public_dir = "./public"
library_link = public_dir + "/library"
fs.readdir library_link, (err, files) ->
  err? and console.log "ERROR: #{library_link} not linked to media library"

# static server
fileServer = new (static.Server) './public'
app = http.createServer((request, response) ->
  request.addListener 'end', ->
    fileServer.serve request, response


  path = url.parse(request.url).pathname
  console.log "GET: #{path}"
  if path == '/oauth/callback'
    rdio_oauth_callback request, response
    response.writeHead 302,
      'Location': '/'
    response.end()

).listen(nconf.get('http:port'))
console.log "Attempting to serve http://localhost:#{nconf.get('http:port')}/"

rdio_oauth_callback = (request, response) ->
  parsed_url = url.parse request.url, true
  rdio_server.oauth_callback parsed_url.query.oauth_verifier

rdio_server = new (RdioServer.RdioServer) process.env.RDIO_API_KEY, process.env.RDIO_SHARED_KEY, "#{app.address().address}:#{app.address().port}"
rdio_server.login (url) ->
  console.log url

io = socketio.listen(app)
io.set 'log level', nconf.get('log_level')
io.sockets.on 'connection', (socket) ->
  mpd = net.connect nconf.get('mpd:port'), nconf.get('mpd:host'), ->
    console.log "mpd connect"
  mpd.on 'data', (data) ->
    socket.emit 'frommpd', data.toString()
  mpd.on 'end', ->
    console.log "mpd disconnect"
    try socket.emit 'disconnect'
  mpd.on 'error', ->
    console.log 'No mpd daemon found.'

  socket.on 'tompd', (data) ->
    console.log "[in] " + data
    try mpd.write data

  socket.on 'disconnect', -> mpd.end()

  socket.on 'rdiosearch', (query) ->
    console.log "rdiosearch: #{query}"
    rdio_server.search query, ->
